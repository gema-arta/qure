= ISO9660 Image Booting =

- Floppy Emulation

    genisoimage -b IMAGE

    This argument is required for all ISO9660 image booting.
    If the image size equals a traditional floppy disk,
    i.e. 144*10240, floppy emulation is used.

    The bootdevice (register ''dx'') is 0, the first floppy. Any real
    floppy drives present are shifted.

- No Emulation

    genisoimage -no-emul-boot -boot-load-size SECTORS

    No emulation. Able to specify a number of sectors to be loaded
    by the BIOS. The entire boot image is stored on disk, even
    if it is larger than the number of sectors.

    The bootdevice is E0, however, the specification says
    it will be between 81 and FF. However, the harddisks
    are also shifted forward...
    If there is one harddisk present, 81 indicates the cd.
    If there are two harddisks present, 81 may indicate
    the second harddisk, or the disk image. 80 then can
    indicate the first harddisk, or the image.

- HDD Emulation

    Not tested.


A bootloader that would work regardless, would not rely on BIOS,
or the ISO9660 format, to have the boot image stored succeeding the first sector.

On an ISO9660 image we can safely assume that the image is contiguous,
and access it using the BIOS and the drive identifier in register ''dl''.

On a harddisk, the sectors after sector 0 are undefined. The partition
table present in the bootsector (which is then called MBR), indicates
the disk format.

Thus, to be able to use one universal bootloader for booting from
CD, floppy, or existing disk, we can only rely on 440 bytes of
code and 70 bytes partition information.

The partition table for a harddisk is able to reserve space,
and if installing on an empty HDD we can then use this function
to reserve space for the boot image before the partitions.

Since the BIOS only provides automatic loading of more than one sector
in a no-emulation el-torito CD image, we cannot rely on this feature
in case the boot device is a floppy or a harddisk (or USB, NIC etc..)


= Segmentation =

The first attempt then is to have the bootloader code load the sectors following
the boot sector.

The bootsector should know the size of the entire boot image.
This can be done by having one source file, ''bootloader.s'',
which defines a symbol equalling the number of sectors.
This would also allow to use the same address space for the entire image.

A second sourcefile may define itself as at origin 512.
They cannot then be included, if the second uses GNU AS, and
uses .text and .data, as data from the second sector will end up
in the first sector.

It is then required to have both the code and the data present
in the first sector. This can be done in various ways:

* using only .text in the first sector.
* disallowing using .data in succeeding sectors.
* using only .text throughout, using subsections.

The solution chosen is to implement the bootsector using only .text,
which limits the restrictions to only the first 440 bytes.

= Loading succeeding sectors =

Assuming that the entire image has been constructed to use the same
address space, i.e. is contiguous, and code any sector can correctly
reference any other sector.

Assuming further, for the first attempt, that the image itself
is contiguous on disk, including it's first sector.

The code then is a simple loop to load a number of sectors,
incrementing the load address, or, trusting the BIOS to load multiple
sectors at once.

* Loading contiguous block anywhere on the boot medium

* Loading contiguous block anywhere

* Loading filesystem specific, possibly discontinuous block

Limitation: BIOS can have limited capacity to address storage.


== Contiguous kernel storage ==

DOS implements this by having it's tools enforce a contiguous storage
of system files (IO.SYS etc) within the fragmentable filesystem.
Since the FAT filesystem is relatively simple, finding a disk address
for a file is very straightforward.

Linux implements this by having a reserved disk area within it's filesystems
where all files are (i suppose) written consecutively.

The IBM partitioning scheme for harddisks allows for reserved sectors
to follow the bootsector, however, there is no consensus as to it's
format, and thus, different OS's on other partitions may assume it's
space for it's own use. 

We may assume that the bootloader is stored on a particular partition,
in which case it determines the start of the filesystem and thus can
reserve the data for itself. FAT for instance specifies where it's
descriptor sectors are stored, which offer the possibility of reserving
space outside of the filesystem. 

Since the bootloader is too small to implement finding out the address
for a particular file in all filesystems, we do rely on this contiguous
storage for the stage 1 bootloader - sector1.

=== Floppy Bootsector ===
set stack top to 7c00

Uses INT 1E vector (0000:0078) floppy drive parameters,
updates it and calls another bios int.

Uses data in sector to seek root of filesystem for kernel - io.sys etc.
loads it, and executes it.

terminates with int 19 when unsuccesful

=== Hard Disk Bootsector ===

Relocates itself to 0000:0600.

contains primary partition table; scans itself to see if there is
an active/bootable partition. If so, loads the first sector of
the partition at 0000:7c00 and executes that.


== Modular Kernel ==

To have a configurable, extensible kernel, we will need to be able to 
have a filesystem space where these settings can be configured, and modules
stored.

As such the division of sector1 bootstrapping the core kernel image,
is no longer necessary, as both are static, contiguous blocks.
Simply appending this core kernel to the stage 1 bootloader 'sector1'
removes the need for code to do anoter dereference.

However, the bootloader is made as universal as possible, and thus,
can be the MBR, or a partition bootsector. It is possible to have
several kernels on different partitions, which would then duplicate
this stage1 loader on different partitions, each having their own
different kernel embedded in them.

Further, when the core kernel image itself is to be configurable,
having the bootloader code stable, it is convenient to have this
deference.

It does require however that the filesystem of this shared space is
programmed into sector1, and thus, operating system specific code
would be present there.

= Relocation =

The bootloader should automatically relocate itself if it is the MBR.
It can then chainload the bootloader from a particular partition.

Since this chainloaded bootloader does not know where it was loaded from,
it needs to encode this within it's own structure. As we cannot know which
filesystems may be used, we just stick with the MBR, even in Volume
Boot Sectors (partition boot sectors).


Bootloader, Kernel loading, relocation
--------------------------------------
This section describes the implementation represented by the commit in which
this text appears.

The bootloader loads the first four ramdisk entries, if present, assuming the
first is the kernel, the second the kernel relocation table, the third the
kernel symbol table, and the fourth the kernel source-line info.

It will load the first ramdisk sector (the ramdisk FAT) after the bootloader
in low memory. Next it will load the kernel, page aligned if configured, after
the ramdisk fat table.
Then it will load, in high memory (starting at 1mb), the next 3 items
(relocation/symbol/source tables), compactly. It will load the sectors in low
memory and copy them to high memory by temporarily switcing to protected mode.

Next it will relocate the 32-bit addresses in the kernel. The relocation table,
generated by util/reloc.pl, consists of two arrays - 16 bit and 32 bit
addresses, each preceded by their size. Thus, the 16 bit code, except where
it references 32 bit addresses, will not be relocated.

It executes the kernel by setting cs, ds to the address of where the kernel is
loaded (either sector or page boundary). The realmode kernel entrypoint thus
becomes address 0. (the kernel adjusts for this if necessary).

Kernel
------
The kernel detects whether it was relocated or not, by checking a .text
reference for null, and performs the necessary operations. In the case
where the kernel is relocated, for instance, the GDT and IDT must be updated
since they don't store pointers consecutively.



Boot Image Layout
-----------------

	Bootsector			# MBR / Loads bootloader
	Bootloader			# Loads ramdisk/kernel image
	Ramdisk				# Kernel image
		RAMDISK FAT
		Kernel
			16bit code/data
			32bit code
			32bit data
		relocation table
		symbol table
		source table


Flat:

	Bootsector			0
	Bootloader			B
	Ramdisk FAT			1
	Kernel Image			K
	Kernel relocation table		R
	Kernel symbol table		S
	Kernel source table		Z


Relocation Table
================
  (Associated files: util/reloc.pl, bootloader/sector1.s)

The relocation table consists of a dword indicating the number of 16-bit
addresses that follow, then another dword doing the same for 32-bit addresses.

	.long addr16_count
	.rept addr16_count
		.word address
	.endr

	.long addr32_count
	.rept addr32_count
	 	.long address
	.endr


Kernel Relocation Table Compression
-----------------------------------

The compression ratio at current is about 3.72 or 26% of the original size.

It makes use the sequential order of the address table to compute a delta-table.
The delta table is converted into an alphabet by listing all unique delta's,
ordered by size.

Compression is indicated by setting bit 0x40000000 (1Gb) in the addr32 count
field. This is the first bit in the length field that does not make sense in
terms of length, for having that many addresses means that the entire 4Gb
address space is relocated, unless there is overlap in the addresses, which
makes it an obfuscation algorithm, for which it is not intended.

If this bit is set, that means that the next word will be the size of
the alphabet, followed by a byte indicating the width in bits of the
alphabet characters, followed by another byte indicating the width in
bits of the deltas.

The current kernel is such that there are no delta's more than 16 bits wide,
and thus the latter byte has value 2 (2 bytes per alpha/letter). Also,
there are about 218 different delta's, which means that the alphabet width
is only 8 bits.

After these four bytes follows the alphabet: at current, 218 words.
After that, the delta table follows, which has the same number of elements
as specified in the addr32 count field.

Note that only 32 bit relocation compression is implemented as yet.

Here is the format:

		.long addr32_count | 0x4000000
		.word alphabet_size			# i.e. 218
		.byte alphabet_width_in_bits		# i.e. 16
		.byte delta_width_in_bits		# i.e. 8
	alpha:	.rept alphabet_size
			.<alphawidth> delta_value
		.endr
	delta:	.rept addr32_count			# i.e. 5933 
			.<deltawidth> alpha_idx	# i.e. .byte alpha_idx
		.endr


		LEGEND:
			<alphawidth>: .byte, .word or .dword
			<deltawidth>: .byte, .word or .dword


Limitations
-----------

The compression algorithm rounds the number of bits for alpha and delta
to 1, 2, or 4 bytes, at current, for ease of programming.
Run-length encoding is not implemented.

The bootloader applies the relocation table to the kernel image, without
unpacking it. It leaves the table available (at 1Mb at current), in case
the kernel wants to do other relocations on itself. 
