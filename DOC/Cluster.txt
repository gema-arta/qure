Adding a machine
================

The perl utility ''util/adm'' contains a virtual machine manager (''adm vm'').
In the qure source directory, either run ''source .tcshrc'' (if that is your shell)
or ''alias vm adm vm''. The steps below will assume this is done.

To add a new machine, simply run

	> vm add

This will produce some output, ending with something like:

	root> root::vm>
	* base: C:/code/neonics/sandbox/trunk/qure/os/vm/vmware/

		  VM = $BASE/../vm/vmware
	    TEMPLATE = $VM/qure-template
	     CLUSTER = $VM/cluster


	 copy $VM/qure-template $VM/cluster/qure-7

The number 7 here is the virtual machine number, which is to be used to manage individual
machines. Starting, resetting, and stopping a machine can be done with:

	> vm start 7
	> vm reset 7
	> vm stop 7

Note that you will probably need to configure the script to tell it the path to ''vmrun'',
which is a VMWare VIX utility bundled with VMWare Workstation. It is configured for Cygwin
on Windows 7 at current. (''`cygpath -u "c:/Program Files (x86)/VMware/VMware VIX/vmrun.exe"`;'').


Naming a machine
----------------
This is not yet implemented, although support for named machines is.

Manual instructions:

	> cd vm/vmware/cluster
	> mv qure-(get the number from the previous command) qure-{name}

We'll also want to update the hostname and display name:
	> vi qure-{name}/qure.vmx 
Change the lines starting with `guestinfo.hostname` and `displayName`.
Changing the device boot order is done in the BIOS. By default it will
first boot from the first hard disk and then from CDROM. To make sure
that you can enter the bios, edit or add the line `bios.bootDelay = "2000"`
to increase the timeout to 2 seconds.

Note that the script will only manage machines that are in directories
starting with 'qure-'. The `{name}` must match /^\d+|\w+$/.

NOTE: at current the template vmx file is corrupt. Use
qure-template/works.vmx. (It's probably the ';' comments?)


Enabling node clustering
------------------------
For the node to be able to particpate in the cluster it will have to
have persistent storage. This storage will have to be a partition
with the ''oofs'' filesystem. Typically the disk of new VMs is
a unpartitioned 512Mb image. Follow these steps:

make sure it's hda and unpartitioned:
	> fdisk hda

Create a partition table:
	> fdisk hda init
This will automatically partition the drive to have one partition
of maximum size. This is required initially. You will be asked to
type 'Yes' twice. Anything else will abort.
It will also copy the boot image, so it's possible to boot from hda,
although the default is from optical disk (ISO9660 cdrom/dvd/whathaveyou).
The disk layout is then:
* bootsector: first sector of bootloader and partition table
* rest of bootloader
* kernel ram image (simple object file:
  * image header
  * 16 bit code and data
  * 32 bit code and data
  * relocation table
  * symbol table
  * source table

The partitioning can then be modified by running:
	> fdisk hda verify
which is an interactive partition editor. No changes
need to be made, although the partition can be shrunk
and others added. The partition itself is bootable, and this
can be toggled.

The next step is to initialize the partition with the file system:
	> mkfs -t oofs hda0

You can now reboot or run
	> cloud init
	> cloud start
(but this hasn't been tested for a while - a reboot is usually faster and
also tests the automatic setup).

For reference, the 'cloud' command expects one of these action names:
(also see `cloud help`)
* status	# default action: prints cluster information
* init	# will reload the cluster sector or create it if hasn't yet
* register # sends 'hello' packet over MCAST
* start	# enables sending pings
* stop	# disables.
* reboot # reboots a cluster node, if this is enabled; see kernel/net/net.s, net_check_reboot_packet)


In essence, all of the above at this point is merely a very complicated way to
allocate one sector of storage, as a node currently only consumes a fraction
of that.


Cluster initialization
======================

When the machine boots, it will start the cluster daemon which will attempt to
automount hda0 on /net (if nothing is mounted there), verifying it is of type
'class_fs_oofs'.

To have this work, follow these steps:

Configure the virtual machine to have an empty disk (hda).
Only disks <= 512Mb have been tested.

	> fdisk hda init
	> mkfs -t oofs hda0

The next time the machine boots it will automount and initialize cluster data,
at current 1 sector. This sector contains the node age, which is incremented
each time the machine boots. It also contains the cluster era, which is the
current incarnation of the cluster.


Terminology
===========
A (network) node is a (virtual) machine.
A cluster is a group of nodes on a (local) network. It consists of all running
nodes.

Node age reflects the number of times a node has booted, or 'incarnated'.
Cluster age reflects the number of times the whole cluster has reincarnated.
Cluster incarnations are separated by cluster extinction, which is when all
cluster nodes have 'died' - are offline.


Cluster Era
-----------
Anytime a node boots, it instantiates an instance of class cluster_node
which it attempts to load from persistent storage, containing the cluster
era and node age. The node age is incremented, counting node 'incarnations'
or reboots.
It then proceeds to broadcasts a message indicating it's presence in the
network cluster, sending the cluster era and node age. The first time
a node attempts to join the cluster, it will have age 1, and a cluster era
of 0.

All nodes in the cluster respond to this broadcast message if the announcing
node is unknown, by sending a direct message to the broadcasting node,
containing their own identification (cluster era and node age).

This way, a node can detect whether it is the only node in the cluster. If this is
so, it decides it is the first node in the cluster (since the only one), and
increments the cluster era to mark a new beginning. The cluster era of the
first cluster then will also have a value of 1. An initialized cluster consisting
of one node will then have era=1, age=1.

Therefore, the cluster era is a counter indicating the stability of the cluster.
As long as there is always at least one node in the cluster, the cluster era
will not increment.


A second node joining the cluster in the same manner will send era=0, age=1,
and receive era=1, age=1 from the first node. It knows that era=0 means
the cluster is not initialized, and receiving the era value from the other
node, uses it to update it's own value for it.

