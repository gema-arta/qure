ITC - Inter Task Communication (also known as IPC)

  [!NOTE: the term Inter-Task rather than Inter-Process is used as the process
  concept has not yet been defined in the kernel; as yet, there is no
  distinction.]

Task Detection
--------------
By registering an interrupt handler at MAX_IRQ + 1, a task could establish
communication with other tasks, as it is a broadcast channel.
The task would execute such a call by preparing it's register contents,
and issuing an interrupt. These interrupts can be configured to be allowable
at certain privilege levels in the IDT.
The first 19 interrupts are reserved for the kernel, as they are exception handlers.
The kernel determines when these are triggered, and therefore should not be used
directly by tasks, unless there is an agreement.

For task communication, a task will need to determine whether or not it sent
the message on the broadcast channel. This will require a unique number among
the tasks for each task - a name. Such a number is provided by the kernel - the
task id (legacy name: pid).
If it were up to the tasks to determine a number, a task could first listen, but
it would need to have established timing agreements firsts. It would then wait
for messages confirming the already known identifications, and computing an unused
one. This approach is slow, since it takes time.
A task then, could detect duplicates, by the following protocol:
	(starting situation: 2 tasks running who have established connection; 1 new task starting communication:)
	it would broadcast the number 1.
	1) all tasks respond by sending their number.
	2) all tasks respond by echoing that number, and their own number.

Option 1 will result in the task receiving the numbers 1, 1 and 2. The first 1
the one it sent, then the numbers of the other two tasks. It sees the duplicate,
but cannot be sure whether all tasks have responded (they may have an attitude).
So it claims number 3, and sends it. In the above scenario, task number 3 does not
yet exist, as the one joining the two is the third. Therefore, there will be no
response.
If task 3 was keeping silent so far, it can now speak up by sending it's number.
The task will read 3, followed by 3 - the first the one it sent, the second the
number of task 3.
The two scenario's so far, are that a task may or may not choose to respond with
it's number when it reads another number. (task 3, above, could aswell have been task
2).

Identification Protocol
-----------------------

Assuming communication is set up that will result in information received over
the connection is stored in the task, the task may or may not choose to maintain
a list of numbers and when it last saw them.
A persistent information storage cannot be based on an operating system provided
number, as the number changes with each task instance.
(implications on DNA: governmental identity limits cross-lifetime memory).
Therefore, the persistent identities must be managed by the communication protocol
itself.
In such a persistent system, each task can send any number it likes. Let's say
that it makes up a name for itself and offers it on the broadcast. The other tasks
knowing this, cannot be sure whether the name refers to the task they remember
by that name. For, when a task is met for the first time, it's name will be unknown,
and there will be no reason not to associate all communications with that task
to that name. The only potential issue is that another task - say one also known -
starts to communicate using that identity. (starting scenario: all tasks have
unique names and all tasks are known to all tasks; enter a new task).
	new task: i am <existing name>?
	moderator: I am <existing name>!
	new task: i am <unknown name>
	moderator: i am <existing name>
The moderator here is a role. Each task serves this role to uphold it's identity
within the collective. This means, that each task moderates their name.
The new task is in fact trying to establish itself as moderator for <existing name>.
the moderator for that name, a task known by <existing name>, speaks up and makes
the same claim.
All tasks now know, in the case of conflict, that there is an unknown or known task
impersonating a known task. In the case where there are two messages claiming
to be an unknown name, all tasks but the one or two tasks generating these
messages will not take part (or they will, or communicate about it without
directly claiming to be, or adressing the unknown name). Note that any task,
known or unknown, can send such messages, giving the illusion of conflict.
Yet conflict is not communication, and as such, conflicts about unknown names
cannot be taken seriously, as nothing is known about them, besides this.
Since tasks are idle in a different way, they do not care much about their names,
any number will do, as there is no correlation between made up names and reputation.

Say that tasks have their limits, and that after a certain amount of conflicting
messages they simply can't be bothered anymore with that message, since it simply
repeats and doesn't change the information (besides keeping track of how many
times it's name is mentioned). After this period, they will not respond to
the same message. Thus it is possible that a task joins, and attempts to use
a name that others remember as offensive, without being aware of this. It would
state the name and receive no response. It would try different names for a while,
but would give up after a certain amounts of empty echoes, and assumes it is
alone: a silent task's presence coincides with a new task's first word, as the
task assuming it is alone cannot tell whether the task was already there
when it arrived. Therefore, any word will be taken to be a new task.

The next step in the protocol would be for all tasks who acknowledge a new name
to mention that name. Therefore, situation 2) (as described a while up), where
each task responds with it's own identification, and the identification of the new
task. Thus, their int instruction will use two registers.

Since a task cannot be sure of what the convention is, it will put it's name
in two registers, and make sure the other registers all have different values.
It could put it in all registers aswell, or all except one, and possibly
in memory references.
All tasks would on receiving the broadcast compare all registers with each other,
or scan for duplicates. In the case where all but one register has the same
value, which value the identity is meant to be is unknown.
A task would respond to such a message by leaving some registers as is. It would
need to leave one identification intact for the sender to recognize it as a response.
Which value(s) are overwrittenc/changed determine the meaning the task
ascribes to it, if any. If it writes is own number in one of the registers,
it then establishes it's identity relative to the message. It may use the register
that is convention to it. 
A task may put increasing numbers in it's register, whereby the task offers identities
for the value-slots to other tasks. This then, if the numbers are consecutive,
allows to reserve a number-range for the task, for, to allow overlap with other tasks
is to use a known name. Therefore, the numbers in any register can be contested.

Security
--------
Tasks can establish a signing protocol, where they send a signature number.
The other tasks will by then know how to calculate the signature to verify
the sender. This signature number can be sent in place of the task's identification
number, but this would require all tasks to compute the signature of the message
using the numbers of all known tasks (by concatenating the remembered task identities
one by one to the signature-sensitive data). This scheme can be used by all
tasks who know each other - a group. A newcomer would not know any identities,
and thus would not be able to verify the signature. When such a newcomer
becomes aquainted with a group member, this group member can not use the scheme
without all it's aquaintances knowing it (assuming they know the algorithms in use).

Shared Secret
-------------
All tasks receive all messages. A kernel service might facilitate this by arranging
private channels. A public message must be sent to engage such kernel services.
The first such messages is to query, enable, and disable such kernel intervention
for sent messages. To publically query but not immediately enable allows other
tasks to make correlations as to the basis of the decision to engage the kernel's
private channel services.

Once a new name is established for a task, this name will be included in all
messages originating from or addressed to the task with that name. To avoid repeating
the welcome (and ignoring time, as each task may be scheduled any time), a number
is used to establish the sender of the message is authentic. A public number may
be used, which all tasks will associate with the task's name. This number can be
used as a secret, creating a boundary for new tasks. New tasks setting up
communications will eventually learn the authentication method and will be able
to recognize messages from (to it) unknown tasks. This public number then simply
serves as an alias and is identical in function to an unauthorized name.

When a task shares it's authentication, all tasks are able to send messages
authenticated as each other, and thus does not serve it's function.
(pubkey crypto).

All tasks monitor all communication, and can detect messages appearing to originating
from them while knowing they do not. Therefore, in such a community, simply sending
the sender-identification, while the task is active, will prevent such to go
unnoticed. However, a non-running task may be simulated. A task may ask for
confirmation, but it would need to have a shared secret in order to identify
the other task. Such shared secrets are limited to circles of trust; the smallest
one is one shared secret between every two tasks.



