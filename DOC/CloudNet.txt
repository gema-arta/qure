Distributed Architecture


Setup with 2 instances on a LAN:

The internet gateway is configured to forward certain ports to a fixed ip.
Running two instances on a LAN then will have only one of them respond to
packets for the IP. The IP is (pre)configured in the os.

Initialisation routine on a LAN then involves pinging the fixed IP to
determine whether it is available. If so, the NIC is configured with the IP.
If not, another IP is chosen.

The machine that is not using the gateway's forward IP regularly pings the IP,
and when there is no response, reconfigures itself with the IP.

'Master/Slave'

In this setup, only one instance on the lan has the ip, and is called the
'master'. It may be aware of other instances using some protocol, and could
forward packets to load balance within a LAN.

[the above is a todo, there is no checks as yet to count the LAN instances]



WAN: .cloud

subdomain: cloud.neonics.com
subdomain DNS: cloudns.neonics.com (DYNA record).

The OS currently implements a DNS proxy for cloud.neonics.com,
returning the address for cloudns.neonics.com, which is the public ip
of the (so far) only instance running the OS.

The model can serve other domains aswell, and illustrates how updates
can propagate.

All cloud machines will check the main DNS server and register themselves
by using the DNS update mechanism. 




Deployment
----------

It is envisioned that QuRe will be deployed on private (non-corporate)
sites, using modems connected through fiber, the telephone network,
or the media network. The targeted domain then consists of consumers,
which may not have the expertise of advanced network configuration,
or running a server. The gateway then must be assumed to be the most
limiting version. Normally these have a built-in DHCP server.
It is required that these gateways offer portforwarding or DMZ.

There is a number of protocols for dynamic gateway configuration such as
portforwarding, though this is not commonly supported with low-end modems.



Communication behind a gateway (LAN)
------------------------------------
Since a single gateay only can forward packets for a particular port to one IP,
when multiple cloud machines are present behind the gateway, one must be chosen
to handle the requests.

There are a number of options for a protocol that allows the machines to
be aware of each other.
First, some sort of broadcast is necessary:
- the broadcast IP for the subnet
- multicast (224.0.0.0/4)

Second, a protocol is needed:
- multicast group membership: IGMP
- netbios
- DNS

A particular multiast group number can be reserved for cloud based services,
where membership of the group, made known by group reports, indicates
the presence of cloud machines.

Netbios is proprietary and shall not be used.

DNS can be used over multicast.
SSDP is HTTP over multicast.

For IPv6, there is NDP (neighbour discovery protocol), which is ICMPv6,
used for:
- router sollicitation/advertisement
- neighbour sollicitation/advertisement
- redirect


Router Configuration
--------------------
Option 1: fixed IP in LAN subnet outside of DHCP IP range.
Downside: there is no way for the machine to discover which IP this might be,
and thus would be a preconfigured default which would require configuration
in the virtual machine (not zeroconf).

Option 2: fixed multicast IP in some unused range.
Downside: the network will be flooded with all incoming communication. This
is desirable so that it reaches all machines, however, this would nullify
switch optimization which would reduce network traffic once the machine IP's
MAC is known. In most cases however, a router will have WiFi and thus will
broadcast anyway.



Basic operation behind a firewall/gateway
-----------------------------------------
Assumptions:
- All machines know the IP to which the service ports are forwarded;
- All machines are aware of each other through the LAN awareness protcol
- One machine is elected to handle requests, which is known by all machines.

Then, all machines monitor the requests, and can take action when the response
is not forthcoming within a timeout period.

It is foreseen that the machines may be shut down at any time, by
terminating or suspending the virtual machine emulator, in which case they
do not broadcast their disappearance.

Further, response times must be as low as possible, say within a second.

This then would require all machines to communicate their presence with each
other, which would flood the network unnecessarily.

When all machines receive all requests, monitoring the presence of a response
from the elected machine then determines whether or not a new machine must
be elected to handle the response.

When a machine detects a timeout in the response time, it can query the
elected machine to see if it is still present. If not, this then serves as
the trigger to elect a new machine to handle requests.


Load balancing
--------------
Multiple machines may handle requests on a socket (remote ip+port) bases
so that requests coming from the same client will be handled by the same
service. Unfortunately the use of HTTP is widespread, which uses many
different connections for a single session, and thus uses different ports.
Furthermore, some remote IP's are gateways themselves, such as in use
by universities, which may house many thousands of clients, all appearing
as the same IP.

---------------------------------------------------------------------

ACPI shutdown detect
--------------------
On shutdown detect, a message can be broadcast.

Shared DMZ
----------
Each vm can implement multiple virtual devices. It can use 192.168.1.11
as the shared DMZ along a DHCP address.
A second MAC must be made - possibly a virtual NIC, for the 2nd IP
address. (like eth0:0).

Running multiple VM's: keep each other informed of who is handling DMZ.
Regular peer-to-peer messages to keep aware of DMZ IP assigned to VM.
On detection of the DMZ vm having gone offline, another takes over.

Host Daemon VM Manager
----------------------
A host daemon can participate in the protocol. It can then configure
all VM's using network messages.
It can also start new VM's and recycle existing ones that do not respond.

VMs can be started in 'nogui' mode (vmrun -T player start file.vmx [no]gui).


